
### **跨平台課業管理機器人**

**核心概念**：整合LINE/Telegram Bot管理學習進度

**技術亮點**：

- 用 Line SDK 或 python-telegram-bot 架構對話機器人
- 連結Google Calendar API同步deadline
- 用 SQLite 儲存個人化學習紀錄
    
    **加分項**：
    
- 用 NLTK 分析用戶輸入的模糊指令（如「下週有什麼作業？」）
- 整合簡易Pomodoro計時功能
    
    **展示重點**：API串接 + 跨平台應用
    

### **自動化課表小幫手**

**核心功能**：

- 用 Tkinter 製作GUI介面，輸入每日課程與作業
- 自動生成「每日待辦清單」並發送提醒到手機（整合IFTTT Webhook）
- 用 matplotlib 繪製「科目時間分配圓餅圖」
    
    **技術亮點**：
    
- 檔案存儲用簡單的CSV檔（`pandas`讀寫）
- 可設定考試倒數日（`datetime`計算）
    
    **分工建議**：
    
- 同學A：設計GUI介面
- 同學B：處理時間計算與提醒功能

### **校園午餐投票系統**

**核心功能**：

- 用 input() 基礎語法讓同學投票選便當菜色
- 即時顯示投票結果（`matplotlib`柱狀圖）
- 自動避開重複投票（記錄學號末三碼到txt檔）
    
    **創意延伸**：
    
- 加入「營養分析」功能（預設每道菜熱量）
- 生成「本週最受歡迎菜色」報告

### **執行建議**

1. **降低技術門檻**：
    - 先用手動匯入txt/Excel取代網路爬蟲
    - 用「預設詞庫」代替複雜的AI模型
    - 優先使用 Tkinter 而非網頁前端
2. **強化視覺包裝**：
    - 將成果輸出成圖表或海報（面試可印出展示）
    - 錄製1分鐘操作影片（手機拍攝即可）
3. **結合生活經驗**：
    - 在文件中說明「為什麼需要這個工具？」
    - 例如：「觀察到同學常忘記帶作業，所以設計提醒系統」
4. **協作範例**：
    - 使用Google Colab共同編輯程式
    - 用Canva一起設計成果報告圖表


第一階段：建立前端（HTML + Flask）與後端（CSV 存儲）
👤 A 負責：前端頁面設計（HTML + CSS + Bootstrap）
👤 B 負責：後端 API（Flask + pandas）

👤 A - 設計 HTML 頁面
✅ 目標： 設計輸入課程的網頁，讓使用者輸入課程名稱、作業、考試日期
📚 學習內容：

HTML 基礎結構（<form>、<table>）
CSS + Bootstrap 美化介面
如何用 <form> 提交資料給 Flask 後端
🛠 A 的任務

設計首頁 index.html
表單輸入：「課程名稱」、「作業內容」、「考試日期」
「提交」按鈕
設計表格顯示已輸入的課程與作業
👤 B - 建立 Flask API
✅ 目標： 撰寫 Flask 伺服器，處理資料存儲、讀取 CSV
📚 學習內容：

Flask 基礎（@app.route、request.form）
pandas 讀寫 CSV
JSON 格式返回前端
🛠 B 的任務

建立 app.py
@app.route('/', methods=['GET', 'POST'])：接收表單資料，存入 CSV
@app.route('/get_tasks')：返回 JSON，提供課表資訊
當 Flask 啟動時，自動讀取 CSV 並顯示資料
📌 合併工作（A + B）

A 設計的 HTML 用 AJAX（或表單提交）發送資料 給 B 的 Flask API
B 把 CSV 存儲的資料轉成 JSON，讓 A 用 JavaScript 抓取並顯示資料
第二階段：考試倒數與提醒功能
👤 A 負責：在前端顯示考試倒數天數
👤 B 負責：Flask 計算考試倒數，並發送 IFTTT 通知

👤 A - 前端顯示考試倒數
✅ 目標： 讓表格中新增一欄「剩餘天數」
📚 學習內容：

JavaScript 處理 JSON，顯示倒數天數
HTML <table> 更新動態數據
🛠 A 的任務

在課程表格內新增一欄「倒數天數」
AJAX 請求 /get_tasks API，更新表格數據
👤 B - 後端計算考試倒數
✅ 目標： 用 datetime 計算考試剩餘天數，並發送通知
📚 學習內容：

datetime 處理日期
Flask 後端計算考試倒數
IFTTT Webhook 發送提醒
🛠 B 的任務

修改 /get_tasks API，讓它返回「倒數天數」
撰寫 send_reminder()，當考試剩 1 天時，發送通知到手機
📌 合併工作（A + B）

B 的 /get_tasks API 計算倒數後，A 在網頁表格中顯示
當倒數 <= 1 天，B 的 Flask 會發送 IFTTT 通知
第三階段：視覺化（圓餅圖分析）
👤 A 負責：用 JavaScript 前端顯示圖表（Chart.js）
👤 B 負責：Flask 後端計算學習時間分配，回傳數據

👤 A - 用 Chart.js 顯示圓餅圖
✅ 目標： 用 Chart.js 繪製學習時間圓餅圖
📚 學習內容：

JavaScript 繪製圓餅圖（Chart.js）
用 AJAX 請求 Flask API，獲取數據
🛠 A 的任務

在網頁加一個「生成圖表」按鈕
AJAX 請求 /get_chart_data API，取得學習時間數據
用 Chart.js 繪製圓餅圖
👤 B - Flask 計算學習時間
✅ 目標： 從 CSV 讀取數據，統計各科學習時間
📚 學習內容：

pandas 讀取並統計 CSV 資料
Flask 傳回 JSON 格式數據
🛠 B 的任務

撰寫 /get_chart_data API，回傳各科目學習時間
計算每科目的學習時數（假設 1 堂課 50 分鐘）
📌 合併工作（A + B）

A 透過 AJAX 取得 /get_chart_data，用 Chart.js 顯示圖表
第四階段：測試與優化
👤 A 負責：網頁設計美化（Bootstrap）
👤 B 負責：錯誤處理與 Flask 部署（Heroku / Railway）

A 調整 UI，讓課表顯示更美觀
B 加入錯誤處理（try-except），避免 Flask 崩潰
B 嘗試部署到雲端（Heroku 或 Railway），讓手機也能使用
這樣 Flask 版本的協作方式更靈活
✅ 可以多人遠端協作（不像 Tkinter 只能本地跑）
✅ 可以透過手機或電腦瀏覽器使用
✅ 可以部署到雲端，長期運行提醒功能