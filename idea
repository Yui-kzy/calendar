
### **跨平台課業管理機器人**

**核心概念**：整合LINE/Telegram Bot管理學習進度

**技術亮點**：

- 用 Line SDK 或 python-telegram-bot 架構對話機器人
- 連結Google Calendar API同步deadline
- 用 SQLite 儲存個人化學習紀錄
    
    **加分項**：
    
- 用 NLTK 分析用戶輸入的模糊指令（如「下週有什麼作業？」）
- 整合簡易Pomodoro計時功能
    
    **展示重點**：API串接 + 跨平台應用
    

### **自動化課表小幫手**

**核心功能**：

- 用 Tkinter 製作GUI介面，輸入每日課程與作業
- 自動生成「每日待辦清單」並發送提醒到手機（整合IFTTT Webhook）
- 用 matplotlib 繪製「科目時間分配圓餅圖」
    
    **技術亮點**：
    
- 檔案存儲用簡單的CSV檔（`pandas`讀寫）
- 可設定考試倒數日（`datetime`計算）
    
    **分工建議**：
    
- 同學A：設計GUI介面
- 同學B：處理時間計算與提醒功能

### **校園午餐投票系統**

**核心功能**：

- 用 input() 基礎語法讓同學投票選便當菜色
- 即時顯示投票結果（`matplotlib`柱狀圖）
- 自動避開重複投票（記錄學號末三碼到txt檔）
    
    **創意延伸**：
    
- 加入「營養分析」功能（預設每道菜熱量）
- 生成「本週最受歡迎菜色」報告

### **執行建議**

1. **降低技術門檻**：
    - 先用手動匯入txt/Excel取代網路爬蟲
    - 用「預設詞庫」代替複雜的AI模型
    - 優先使用 Tkinter 而非網頁前端
2. **強化視覺包裝**：
    - 將成果輸出成圖表或海報（面試可印出展示）
    - 錄製1分鐘操作影片（手機拍攝即可）
3. **結合生活經驗**：
    - 在文件中說明「為什麼需要這個工具？」
    - 例如：「觀察到同學常忘記帶作業，所以設計提醒系統」
4. **協作範例**：
    - 使用Google Colab共同編輯程式
    - 用Canva一起設計成果報告圖表


第一階段：建立 GUI 與資料存儲（可並行開發）
👤 A 負責：GUI 設計（Tkinter）
👤 B 負責：資料處理（pandas + CSV）

👤 A - GUI 設計
✅ 目標： 建立視窗介面，讓使用者輸入課程、作業內容、考試日期等資訊。
📚 學習內容：

Tkinter 的基本元件（Label, Entry, Button, Frame）
版面設計（grid(), pack(), place()）
事件處理（按鈕點擊、輸入框讀取）
🛠 A 的任務

建立一個視窗，包含：
「課程名稱」、「作業內容」、「考試日期」輸入框
「提交」按鈕
一個空白區域，未來用來顯示輸入的內容（暫時不存入檔案）
當使用者輸入內容後，按下「提交」，在視窗內顯示這些資訊（但不存檔）
👤 B - CSV 檔案存儲
✅ 目標： 設計 CSV 檔案存儲機制，讓程式能讀取、寫入課程與作業資訊。
📚 學習內容：

pandas 讀寫 CSV
如何新增、刪除、讀取 CSV 資料
自動載入 CSV 並顯示資料
🛠 B 的任務

建立 tasks.csv，讓程式能夠存入使用者輸入的課程與作業內容
撰寫 save_to_csv() 函數，讓 GUI 按下「提交」後，可以把資料存入 CSV
撰寫 load_from_csv()，讓程式啟動時能自動載入舊資料
📌 合併工作（A + B）
當 A 完成 GUI，B 完成 CSV 處理後，兩人合併代碼：

A 呼叫 B 的 save_to_csv() 來存儲資料
A 呼叫 B 的 load_from_csv()，開啟程式時顯示舊資料
第二階段：考試倒數功能（B 開發）、GUI 表格顯示（A 開發）
👤 A 負責：優化 GUI，新增表格顯示已輸入的資料
👤 B 負責：計算考試倒數天數（datetime）

👤 A - 表格顯示（Tkinter Treeview）
✅ 目標： 讓 GUI 介面顯示所有已輸入的課程與作業
📚 學習內容：

使用 Treeview 在 Tkinter 內顯示表格
設計表格欄位（課程名稱、作業內容、考試日期等）
在 load_from_csv() 時更新表格內容
🛠 A 的任務

在 GUI 加入 Treeview 表格，顯示所有已輸入的課程、作業
當按下「提交」後，更新表格內容
撰寫 refresh_table() 函數，每次存入資料後更新表格
👤 B - 計算考試倒數天數
✅ 目標： 讓程式計算距離考試還有幾天，並顯示在 GUI
📚 學習內容：

datetime 讀取考試日期，計算天數
如何在 GUI 內顯示倒數結果
🛠 B 的任務

撰寫 calculate_days_left()，輸入考試日期，回傳剩餘天數
在 load_from_csv() 時，自動計算每個考試的剩餘天數
📌 合併工作（A + B）
當 A 完成表格顯示，B 完成倒數天數計算後，兩人合併代碼：

A 讓 GUI 表格加入一欄顯示「剩餘天數」
B 的 calculate_days_left() 計算完天數後，A 在表格內更新顯示
第三階段：圖表分析（B 開發）、自動提醒（A 開發）
👤 A 負責：設計自動提醒功能（IFTTT Webhook）
👤 B 負責：用 matplotlib 繪製學習時間分配圓餅圖

👤 A - 自動提醒功能
✅ 目標： 設計自動通知系統，當作業或考試快到期時發送通知到手機
📚 學習內容：

註冊 IFTTT，建立 Webhook
requests 發送 Webhook 請求
設定提醒條件（如剩 1 天發送通知）
🛠 A 的任務

設定 IFTTT Webhook 服務
撰寫 send_reminder()，當考試或作業剩 1 天時發送通知
在 GUI 加入「開啟提醒」按鈕，讓使用者選擇是否要收到提醒
👤 B - 圓餅圖分析
✅ 目標： 讓程式讀取已輸入的學習時數，並生成圓餅圖
📚 學習內容：

matplotlib 繪製圓餅圖
pandas 讀取 CSV 數據，轉換成可視化圖表
Tkinter 按鈕觸發 matplotlib 顯示
🛠 B 的任務

撰寫 generate_pie_chart()，讀取學習時數並畫出圓餅圖
在 GUI 加入「生成圖表」按鈕，按下後顯示圖表
📌 合併工作（A + B）
當 A 完成自動提醒，B 完成圖表分析後，兩人合併代碼：

A 設計一個「提醒設定」按鈕，B 設計「生成圖表」按鈕，最終讓 UI 整合
A 讓 send_reminder() 在 GUI 內執行，B 讓 generate_pie_chart() 也能在 GUI 內運行
第四階段：最終測試與優化
👤 A 負責： 美化 GUI，確保所有按鈕與介面運作正常
👤 B 負責： 測試所有功能，找出錯誤，寫出錯誤處理機制

A 加入錯誤訊息顯示，例如「未輸入課程時不能提交」
B 撰寫 try-except，確保 CSV 讀取錯誤時不會崩潰